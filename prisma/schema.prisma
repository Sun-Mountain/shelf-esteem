generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
}

enum Role {
  USER
  BETA
  MOD
  ADMIN
}

model Author {
  id      String               @id @default(cuid())
  name    String               @unique
  books   AuthorBook[]
}

model AuthorBook {
  id          String     @id @default(cuid())
  author      Author  @relation(fields: [authorName], references: [name], onDelete: Cascade)
  authorName  String
  book        Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId      String
}

model Category {
  name  String  @id @unique
  books BookCategory[]
}

model IndustryIdentifier {
  type       String
  identifier String  @unique
  Book       Book?   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId     String?

  @@id([identifier])
}

model BookCategory {
  id           String      @id @default(cuid())
  book         Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId       String
  category     Category @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  categoryName String
}

model Book {
  id                  String               @unique @default(cuid())
  authors             AuthorBook[]
  categories          BookCategory[]
  description         String?
  industryIdentifiers IndustryIdentifier[]
  language            String?
  maturityRating      String?
  pageCount           Int?
  publishedDate       String?
  publisher           String?
  subtitle            String?
  thumbnail           String?
  title               String?
  user                User                 @relation(fields: [addedBy], references: [id])
  addedBy             String
  libraries           UserLibraryBook[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime?
}

model UserLibraryBook {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String
  createdAt DateTime @default(now())
}

model User {
  id           String            @id @default(cuid())
  username     String            @unique
  email        String            @unique
  password     String
  role         Role              @default(USER)
  createdAt    DateTime          @default(now()) @map(name: "created_at")
  updatedAt    DateTime          @updatedAt @map(name: "updated_at")
  libraryBooks UserLibraryBook[]
  booksAdded   Book[]

  @@map(name: "users")
}
